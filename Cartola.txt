loadstring(game:HttpGet("https://raw.githubusercontent.com/Vitoarieshub/KALI-LINUX-/refs/heads/main/loader.lua"))()

MakeWindow({
    Hub = {
        Title = "Cartola Hub",
        Animation = "Grupo Dos Cartola"
    },
    
    Key = {
        KeySystem = false,
        Title = "Sistema de Chave",
        Description = "Digite a chave correta para continuar.",
        KeyLink = "https://seusite.com/chave",
        Keys = {"1234", "28922"},
        Notifi = {
            Notifications = true,
            CorrectKey = "Chave correta! Iniciando script...",
            Incorrectkey = "Chave incorreta, tente novamente.",
            CopyKeyLink = "Link copiado!"
        }
    }
})

MinimizeButton({
    Image = "rbxassetid://130563590371769",
    Size = {50, 50},
    Color = Color3.fromRGB(10, 10, 10),
    Corner = true,
    CornerRadius = UDim.new(0.5, 0),
    Stroke = true,  -- Ativa a borda
    StrokeColor = Color3.fromRGB(255, 0, 0)  -- Cor vermelha
})

local Main = MakeTab({Name = "Main"})
local Home  = MakeTab({Name = "Home"})
local All = MakeTab({Name = "All"})
local Misc = MakeTab({Name = "Misc"})

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera

local playerName = ""
local jogadorSelecionado = nil
local observando = false
local observarConnection = nil

-- Encontrar jogador
local function encontrarJogador(nome)
	local lowerName = nome:lower()
	for _, player in pairs(Players:GetPlayers()) do
		if player.Name:lower():sub(1, #lowerName) == lowerName then
			return player
		end
	end
	return nil
end

AddTextBox(Main, {
	Name = "Target",
	Default = "",
	Placeholder = "Nome do jogador aqui...",
	Callback = function(text)
		playerName = text
		jogadorSelecionado = encontrarJogador(playerName)
	end
})

local function pararObservar()
	if observarConnection then
		observarConnection:Disconnect()
		observarConnection = nil
	end
	observando = false
	if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
		Camera.CameraSubject = LocalPlayer.Character.Humanoid
	end
end

local function iniciarObservar(jogador)
	if not jogador or jogador == LocalPlayer then return end
	observando = true
	if not jogador.Character or not jogador.Character:FindFirstChild("Humanoid") then return end
	Camera.CameraSubject = jogador.Character.Humanoid
	observarConnection = jogador.CharacterAdded:Connect(function()
		wait(1)
		if observando and jogador.Character and jogador.Character:FindFirstChild("Humanoid") then
			Camera.CameraSubject = jogador.Character.Humanoid
		end
	end)
end

AddToggle(Main, {
	Name = "View",
	Default = false,
	Callback = function(Value)
		jogadorSelecionado = encontrarJogador(playerName)
		if Value then
			if jogadorSelecionado then
				iniciarObservar(jogadorSelecionado)
			end
		else
			pararObservar()
		end
	end
})

AddButton(Main, {
	Name = "Goto",
	Callback = function()
		local jogador = encontrarJogador(playerName)
		if jogador and jogador.Character and jogador.Character:FindFirstChild("HumanoidRootPart") then
			local localChar = LocalPlayer.Character
			if localChar and localChar:FindFirstChild("HumanoidRootPart") then
				localChar.HumanoidRootPart.CFrame = jogador.Character.HumanoidRootPart.CFrame * CFrame.new(3, 0, 3)
			end
		end
	end
})

local teleportLoop = false
local loopConnection = nil

-- Função para teleportar atrás do jogador
local function teleportAtras()
	if not jogadorSelecionado or jogadorSelecionado == LocalPlayer then return end
	local targetChar = jogadorSelecionado.Character
	local myChar = LocalPlayer.Character
	if not targetChar or not myChar then return end

	local targetHRP = targetChar:FindFirstChild("HumanoidRootPart")
	local myHRP = myChar:FindFirstChild("HumanoidRootPart")
	if not targetHRP or not myHRP then return end

	-- Posição atrás do jogador (3 studs atrás)
	local backPos = targetHRP.CFrame * CFrame.new(0, 0, 3)
	myHRP.CFrame = backPos
end

-- Toggle para ativar/desativar o loop de teleporte
AddToggle(Main, {
	Name = "Teleport Loop",
	Default = false,
	Callback = function(Value)
		teleportLoop = Value
		if teleportLoop then
			loopConnection = RunService.RenderStepped:Connect(function()
				-- Atualiza jogador selecionado se necessário
				jogadorSelecionado = encontrarJogador(playerName)
				teleportAtras()
			end)
		else
			if loopConnection then
				loopConnection:Disconnect()
				loopConnection = nil
			end
		end
	end
})



-- Referências iniciais
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Workspace = game:GetService("Workspace")

-- Função global para identificar barreiras de ban
local function isBanWall(part)
    return part:IsA("BasePart")
        and part.Transparency == 1
        and part.Color == Color3.fromRGB(255, 0, 0)
        and part.CanCollide == true
        and part.Size.Magnitude > 10 -- geralmente barreiras grandes
end

-- Guardar conexão para o Auto Unban
local autoUnbanConnection = nil

-- Toggle: Auto Unban
AddToggle(Home, {
    Name = "Auto Unban",
    Default = false,
    Callback = function(Value)
        if Value then
            -- Remove barreiras existentes
            for _, part in pairs(Workspace:GetDescendants()) do
                if isBanWall(part) then
                    part:Destroy()
                end
            end

            -- Conecta monitoramento
            autoUnbanConnection = Workspace.DescendantAdded:Connect(function(descendant)
                if isBanWall(descendant) then
                    task.wait(0.1)
                    descendant:Destroy()
                end
            end)

            print("Auto Unban")
        else
            -- Desconecta se o toggle for desativado
            if autoUnbanConnection then
                autoUnbanConnection:Disconnect()
                autoUnbanConnection = nil
                print("Auto Unban")
            end
        end
    end
})

-- Botão: Unban Manual
AddButton(Home, {
    Name = "Unban",
    Callback = function()
        local count = 0
        for _, part in pairs(Workspace:GetDescendants()) do
            if isBanWall(part) then
                part:Destroy()
                count += 1
            end
        end
        print("Unban Manual:", count)
    end
})


-- ================= ESP ================= --

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Variáveis para ativar/desativar cada ESP
local espNomeAtivado = false
local espIdadeAtivado = false

-- Tabelas para armazenar conexões separadas para cada ESP
local conexoesNome = {}
local conexoesIdade = {}

-- Função que cria o ESP para um jogador, pode mostrar nome ou idade
local function criarESP(player, mostrarIdade)
	if player == LocalPlayer then return end
	task.spawn(function()
		while (mostrarIdade and espIdadeAtivado or not mostrarIdade and espNomeAtivado) and player and player.Character do
			local head = player.Character:FindFirstChild("Head")
			local humanoid = player.Character:FindFirstChild("Humanoid")

			if head and humanoid and humanoid.Health > 0 then
				-- Usamos nome diferente para os ESPs para não conflitar
				local espName = mostrarIdade and "ESP_Idade" or "ESP_Nome"
				local esp = head:FindFirstChild(espName)

				if not esp then
					esp = Instance.new("BillboardGui")
					esp.Name = espName
					esp.Adornee = head
					esp.Size = UDim2.new(0, 100, 0, 25)
					esp.StudsOffset = Vector3.new(0, mostrarIdade and 2.5 or 2, 0) -- Pequeno ajuste para não sobrepor
					esp.AlwaysOnTop = true

					local text = Instance.new("TextLabel")
					text.Name = "Texto"
					text.Size = UDim2.new(1, 0, 1, 0)
					text.BackgroundTransparency = 1
					text.TextColor3 = Color3.fromRGB(255, 255, 255)
					text.TextSize = 12
					text.TextScaled = false
					text.Font = Enum.Font.GothamBold
					text.TextStrokeTransparency = 0.4
					text.TextStrokeColor3 = Color3.new(0, 0, 0)
					text.Parent = esp

					esp.Parent = head

					humanoid.Died:Connect(function()
						if esp then esp:Destroy() end
					end)
				end

				local texto = esp:FindFirstChild("Texto")
				if texto then
					texto.Text = mostrarIdade and (tostring(player.AccountAge) .. " Days") or player.Name
				end
			end

			wait(0.3)
		end

		-- Quando desligar, destrói o ESP se existir
		if player.Character then
			local esp = player.Character.Head:FindFirstChild(mostrarIdade and "ESP_Idade" or "ESP_Nome")
			if esp then esp:Destroy() end
		end
	end)
end

-- Monitorar jogador para ESP Nome
local function monitorarPlayerNome(player)
	if conexoesNome[player] then
		conexoesNome[player]:Disconnect()
		conexoesNome[player] = nil
	end

	conexoesNome[player] = player.CharacterAdded:Connect(function()
		wait(1)
		if espNomeAtivado then
			criarESP(player, false)
		end
	end)

	if player.Character then
		criarESP(player, false)
	end
end

-- Monitorar jogador para ESP Idade
local function monitorarPlayerIdade(player)
	if conexoesIdade[player] then
		conexoesIdade[player]:Disconnect()
		conexoesIdade[player] = nil
	end

	conexoesIdade[player] = player.CharacterAdded:Connect(function()
		wait(1)
		if espIdadeAtivado then
			criarESP(player, true)
		end
	end)

	if player.Character then
		criarESP(player, true)
	end
end

-- Toggle ESP Nome
AddToggle(All, {
	Name = "ESP Name",
	Default = false,
	Callback = function(Value)
		espNomeAtivado = Value
		if espNomeAtivado then
			for _, player in ipairs(Players:GetPlayers()) do
				if player ~= LocalPlayer then
					monitorarPlayerNome(player)
				end
			end
			conexoesNome["PlayerAdded"] = Players.PlayerAdded:Connect(function(player)
				monitorarPlayerNome(player)
			end)
		else
			for _, player in ipairs(Players:GetPlayers()) do
				if player.Character and player.Character:FindFirstChild("Head") then
					local esp = player.Character.Head:FindFirstChild("ESP_Nome")
					if esp then esp:Destroy() end
				end
				if conexoesNome[player] then
					conexoesNome[player]:Disconnect()
					conexoesNome[player] = nil
				end
			end
			if conexoesNome["PlayerAdded"] then
				conexoesNome["PlayerAdded"]:Disconnect()
				conexoesNome["PlayerAdded"] = nil
			end
		end
	end
})

-- Toggle ESP Idade
AddToggle(All, {
	Name = "ESP Account Age",
	Default = false,
	Callback = function(Value)
		espIdadeAtivado = Value
		if espIdadeAtivado then
			for _, player in ipairs(Players:GetPlayers()) do
				if player ~= LocalPlayer then
					monitorarPlayerIdade(player)
				end
			end
			conexoesIdade["PlayerAdded"] = Players.PlayerAdded:Connect(function(player)
				monitorarPlayerIdade(player)
			end)
		else
			for _, player in ipairs(Players:GetPlayers()) do
				if player.Character and player.Character:FindFirstChild("Head") then
					local esp = player.Character.Head:FindFirstChild("ESP_Idade")
					if esp then esp:Destroy() end
				end
				if conexoesIdade[player] then
					conexoesIdade[player]:Disconnect()
					conexoesIdade[player] = nil
				end
			end
			if conexoesIdade["PlayerAdded"] then
				conexoesIdade["PlayerAdded"]:Disconnect()
				conexoesIdade["PlayerAdded"] = nil
			end
		end
	end
})

-- Variável global para controlar o estado do ESP

local espAtivado = false



-- Serviços necessários

local Players = game:GetService("Players")

local RunService = game:GetService("RunService")

local LocalPlayer = Players.LocalPlayer



-- Função para aplicar o Highlight

local function aplicarHighlight(player)

    if player == LocalPlayer then return end

    local character = player.Character

    if character and not character:FindFirstChild("ESPHighlight") then

        local highlight = Instance.new("Highlight")

        highlight.Name = "ESPHighlight"

        highlight.Adornee = character

        highlight.FillColor = Color3.fromRGB(255, 255, 255) -- Cor branca

        highlight.FillTransparency = 1 -- Centro totalmente transparente

        highlight.OutlineColor = Color3.fromRGB(255, 255, 255) -- Cor branca

        highlight.OutlineTransparency = 0 -- Contorno totalmente opaco

        highlight.Parent = character

    end

end



-- Função para remover o Highlight

local function removerHighlight(player)

    local character = player.Character

    if character then

        local highlight = character:FindFirstChild("ESPHighlight")

        if highlight then

            highlight:Destroy()

        end

    end

end



-- Loop de atualização contínua

RunService.RenderStepped:Connect(function()

    if espAtivado then

        for _, player in ipairs(Players:GetPlayers()) do

            aplicarHighlight(player)

        end

    else

        for _, player in ipairs(Players:GetPlayers()) do

            removerHighlight(player)

        end

    end

end)



-- Monitorar novos jogadores

Players.PlayerAdded:Connect(function(player)

    player.CharacterAdded:Connect(function()

        if espAtivado then

            aplicarHighlight(player)

        end

    end)

end)



-- Toggle para ativar/desativar o ESP

AddToggle(All, {

    Name = "ESP Box",

    Default = false,

    Callback = function(Value)

        espAtivado = Value

    end

})



local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera

local espAtivado = false
local espObjects = {}

local cinza = Color3.fromRGB(128, 128, 128) -- cor cinza

local function criarESP(player)
    if player == LocalPlayer then return end
    
    -- Criar a linha
    local line = Drawing.new("Line")
    line.Color = cinza
    line.Thickness = 2
    line.Transparency = 1
    line.Visible = true

    -- Criar a label vazia para manter a posição, mas sem texto
    local function criarLabel()
        if not player.Character then return nil end
        local rootPart = player.Character:FindFirstChild("HumanoidRootPart")
        if not rootPart then return nil end
        
        local espGui = Instance.new("BillboardGui")
        espGui.Name = "ESPLineLabel"
        espGui.Adornee = rootPart
        espGui.Size = UDim2.new(0, 100, 0, 25)
        espGui.StudsOffset = Vector3.new(0, -3, 0) -- embaixo do pé
        espGui.AlwaysOnTop = true
        
        -- Label vazio, sem texto
        local textLabel = Instance.new("TextLabel")
        textLabel.Size = UDim2.new(1, 0, 1, 0)
        textLabel.BackgroundTransparency = 1
        textLabel.Text = ""
        textLabel.Parent = espGui
        
        espGui.Parent = player.Character
        return espGui
    end

    local labelGui = criarLabel()
    espObjects[player] = {line = line, label = labelGui}

    local conn
    conn = RunService.RenderStepped:Connect(function()
        if not espAtivado or not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then
            line.Visible = false
            if labelGui then labelGui:Destroy() end
            conn:Disconnect()
            espObjects[player] = nil
            return
        end

        local rootPos = player.Character.HumanoidRootPart.Position
        local rootPos2D = Camera:WorldToViewportPoint(rootPos)
        local screenCenter = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y)

        if rootPos2D.Z > 0 then
            line.From = screenCenter
            line.To = Vector2.new(rootPos2D.X, rootPos2D.Y)
            line.Visible = true
        else
            line.Visible = false
        end
    end)
end

local function monitorarPlayers()
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            criarESP(player)
        end
    end
end

AddToggle(All, {
    Name = "ESP Line",
    Default = false,
    Callback = function(value)
        espAtivado = value
        if espAtivado then
            monitorarPlayers()
            Players.PlayerAdded:Connect(function(player)
                if espAtivado and player ~= LocalPlayer then
                    criarESP(player)
                end
            end)
        else
            for player, data in pairs(espObjects) do
                if data.line then
                    data.line.Visible = false
                    data.line:Remove()
                end
                if data.label then
                    data.label:Destroy()
                end
            end
            espObjects = {}
        end
    end
})


local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local antiVoidConnection = nil
local antiVoidPlatform = nil

-- Função para criar a plataforma anti-void
local function createAntiVoidPlatform()
    if not antiVoidPlatform then
        antiVoidPlatform = Instance.new("Part")
        antiVoidPlatform.Size = Vector3.new(500, 1, 500)
        antiVoidPlatform.Position = Vector3.new(0, -50, 0)
        antiVoidPlatform.Anchored = true
        antiVoidPlatform.Transparency = 1
        antiVoidPlatform.CanCollide = true
        antiVoidPlatform.Name = "AntiVoid"
        antiVoidPlatform.Parent = workspace
    end
end

-- Função para remover a plataforma
local function removeAntiVoidPlatform()
    if antiVoidPlatform then
        antiVoidPlatform:Destroy()
        antiVoidPlatform = nil
    end
end

-- Função para monitorar o Void
local function startAntiVoid()
    antiVoidConnection = game:GetService("RunService").Heartbeat:Connect(function()
        local character = LocalPlayer.Character
        if character and character:FindFirstChild("HumanoidRootPart") then
            local hrp = character.HumanoidRootPart
            if hrp.Position.Y < -100 then
                hrp.CFrame = CFrame.new(0, 50, 0)
            end
        end
    end)
end

-- Função para parar o monitoramento
local function stopAntiVoid()
    if antiVoidConnection then
        antiVoidConnection:Disconnect()
        antiVoidConnection = nil
    end
end

-- Botão Toggle
AddToggle(Misc, {
    Name = "Anti void",
    Default = false,
    Callback = function(Value)
        if Value then
            createAntiVoidPlatform()
            startAntiVoid()
        else
            stopAntiVoid()
            removeAntiVoidPlatform()
        end
    end
})

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local antiSeatEnabled = false
local seatConnections = {}

-- Função para proteger contra sentar
local function setupAntiSit(character)
    local humanoid = character:WaitForChild("Humanoid", 5)
    if not humanoid then return end

    local connection = humanoid.Seated:Connect(function(isSeated)
        if isSeated and antiSeatEnabled then
            humanoid.Sit = false
        end
    end)

    table.insert(seatConnections, connection)
end

-- Função para limpar conexões anteriores
local function disconnectAllSeats()
    for _, conn in ipairs(seatConnections) do
        if conn.Connected then
            conn:Disconnect()
        end
    end
    table.clear(seatConnections)
end

-- Detectar novo personagem
LocalPlayer.CharacterAdded:Connect(function(char)
    if antiSeatEnabled then
        setupAntiSit(char)
    end
end)

-- Interface Toggle
AddToggle(Misc, {
    Name = "Anti Sit",
    Default = false,
    Callback = function(Value)
        antiSeatEnabled = Value

        if Value then
            -- Aplicar imediatamente se já tiver personagem
            if LocalPlayer.Character then
                setupAntiSit(LocalPlayer.Character)
            end
        else
            disconnectAllSeats()
        end
    end
})
